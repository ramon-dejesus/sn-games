<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function($scope, $timeout) {
	var c = this;

	// Widget Option Bindings
	c.mode = c.data.options.default_game_mode || "pvp";
	c.backgroundColorHex = c.data.options.backgroun_color_hex || "#fff";
	c.fontColorHex = c.data.options.font_color_hex || "#000000";
	c.borderColorHex = c.fontColorHex;
	c.fontFamily = c.data.options.font_family || "Arial, sans-serif";
	c.logoUrl = c.data.options.logo_url || "../sn_games_logo.png";
	c.providerUrl = c.data.options.provider_url || "https://github.com/ramon-dejesus/sn-games";

	const ROWS = 6;
	const COLS = 7;

	// Game State
	c.board = [];
	c.currentPlayer = 'R';
	c.winner = null;
	c.isDraw = false;
	c.cpuThinking = false;
	c.winningKeys = null;

	// Initialize Board
	c.resetGame = function() {
		c.board = Array.from({ length: ROWS }, () => Array(COLS).fill(null));
		c.currentPlayer = 'R';
		c.winner = null;
		c.isDraw = false;
		c.cpuThinking = false;
		c.winningKeys = null;
	};

	function checkWinner(row, col, player) {
		const directions = [
			[0, 1],   // horizontal
			[1, 0],   // vertical
			[1, 1],   // diagonal down-right
			[1, -1]   // diagonal down-left
		];

		for (let [dr, dc] of directions) {
			let matches = [[row, col]];

			// Forward direction
			let r = row + dr;
			let cIdx = col + dc;
			while (r >= 0 && r < ROWS && cIdx >= 0 && cIdx < COLS && c.board[r][cIdx] === player) {
				matches.push([r, cIdx]);
				r += dr;
				cIdx += dc;
			}

			// Backward direction
			r = row - dr;
			cIdx = col - dc;
			while (r >= 0 && r < ROWS && cIdx >= 0 && cIdx < COLS && c.board[r][cIdx] === player) {
				matches.unshift([r, cIdx]);
				r -= dr;
				cIdx -= dc;
			}

			if (matches.length >= 4) return matches;
		}

		return null;
	}

	function isBoardFull() {
		return c.board.every(row => row.every(cell => cell));
	}


	// Drop disc into the selected column
	c.dropDisc = function(col, isCpuMove) {
		if (c.winner || c.isDraw) {
			c.cpuThinking = false;
			return
		};

		for (let row = ROWS - 1; row >= 0; row--) {
			if (!c.board[row][col]) {
				c.board[row][col] = c.currentPlayer;

				var winningLine = checkWinner(row, col, c.currentPlayer);
				if (winningLine) {
					c.winner = c.currentPlayer;
					c.winningKeys = winningLine.map(function(pos) {
						return 'r' + pos[0] + 'c' + pos[1];
					});
					
					
					
					if (isCpuMove) {
						c.cpuThinking = false;
					}
					
					$scope.$applyAsync();
					return;
				}

				if (isBoardFull()) {
					c.isDraw = true;
					$scope.$applyAsync();
					if (isCpuMove) {
						$timeout(function() {
							c.cpuThinking = false;
						}, 0);
					}
					return;
				}

				// Game continues
				c.currentPlayer = c.currentPlayer === 'R' ? 'B' : 'R';

				if (isCpuMove && c.currentPlayer === 'R') {
					$timeout(function() {
						c.cpuThinking = false;
					}, 0);
				}

				if (c.mode === 'pvc' && c.currentPlayer === 'B' && !isCpuMove) {
					c.makeCpuMove();
				}

				$scope.$applyAsync();
				return;
			}
		}

		console.log("Column full:", col);
	};



	c.getCellClass = function(row, col) {

		console.log("row: " + row + " col: " + col);

		const base = c.board[row][col];
		if (!base) return '';

		const key = "r"+row+"c"+col;
		console.log("Checking key:", key);
		console.log("Winning keys:", c.winningKeys);
		const isWinner = c.winningKeys && c.winningKeys.indexOf(key) !== -1;

		let classes = [];

		if (base === 'R') classes.push('cf-red');
		if (base === 'B') classes.push('cf-black');
		if (isWinner) classes.push('cf-win');

		var cellClass = classes.join(' ');

		console.log(cellClass);

		return cellClass;
	};

	// CPU move logic for PVC mode
	c.makeCpuMove = function() {
		if (c.winner || c.isDraw) return;
		c.cpuThinking = true;

		$timeout(function() {
			let availableCols = [];
			for (let col = 0; col < COLS; col++) {
				if (c.board[0][col] === null) availableCols.push(col);
			}

			function getLowestEmptyRow(col) {
				for (let row = ROWS - 1; row >= 0; row--) {
					if (c.board[row][col] === null) return row;
				}
				return -1;
			}

			// Try to win
			for (let col of availableCols) {
				let row = getLowestEmptyRow(col);
				if (row !== -1) {
					c.board[row][col] = 'B';
					if (checkWinner(row, col, 'B')) {
						c.board[row][col] = null;
						return c.dropDisc(col, true);
					}
					c.board[row][col] = null;
				}
			}

			// Try to block
			for (let col of availableCols) {
				let row = getLowestEmptyRow(col);
				if (row !== -1) {
					c.board[row][col] = 'R';
					if (checkWinner(row, col, 'R')) {
						c.board[row][col] = null;
						return c.dropDisc(col, true);
					}
					c.board[row][col] = null;
				}
			}

			// Random fallback
			const choice = availableCols[Math.floor(Math.random() * availableCols.length)];
			c.dropDisc(choice, true);
		}, 1000);
	};

	// On load
	c.resetGame();
};
]]></client_script>
        <controller_as>c</controller_as>
        <css>/* Connect Four Widget Styles – Story 6 */

.sn-games-connectfour {
  font-family: var(--font-family, sans-serif);
}

.sn-games-connectfour .game-board-options {
  width: 100%;
  max-width: 30em;
  margin: 0 auto;
}

.sn-games-connectfour .game-board {
  width: 100%;
  max-width: 30em;
  margin: 1rem auto;
}

.sn-games-connectfour .cf-row {
  display: flex;
  justify-content: center;
  gap: 0.5rem;
  margin-top: 0.25rem;
}

.sn-games-connectfour .cf-cell {
  width: 60px;
  height: 60px;
  background-color: #e0e0e0;
  border: 2px solid #444;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
  font-size: 0.85rem;
  text-align: center;
  transition: background-color 0.2s ease-in-out;
}

.sn-games-connectfour .cf-red {
  background-color: red;
  color: white;
}

.sn-games-connectfour .cf-black {
  background-color: black;
  color: white;
}

.sn-games-connectfour .cf-disc {
  user-select: none;
  pointer-events: none;
}

/* Column drop zones (clickable) */
.sn-games-connectfour .game-board .cf-cell[role="button"] {
  background-color: #f0f0f0;
  border: 2px dashed #aaa;
  color: #555;
  cursor: pointer;
}

.sn-games-connectfour .game-board .cf-cell[role="button"]:hover {
  background-color: #ccc;
  border-color: #888;
}

/* CPU Spinner */
.sn-games-connectfour .cpu-spinner {
  font-style: italic;
  font-size: 1rem;
  margin-top: 0.5rem;
  color: #888;
  animation: blink 1s step-start 0s infinite;
}

@keyframes blink {
  50% { opacity: 0.3; }
  100% { opacity: 1; }
}

/* Utility Helpers */
.sn-games-connectfour .text-center {
  text-align: center;
}

.sn-games-connectfour .text-lg {
  font-size: 1.25rem;
}

.sn-games-connectfour .font-bold {
  font-weight: bold;
}

.sn-games-connectfour .center-cols {
  display: flex;
  align-items: center;
  justify-content: center;
}

.cf-grid {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: 0.5rem;
  justify-content: center;
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

[tabindex]:focus {
  outline: 3px solid #007bff;
}

.cf-win {
  animation: flash 1s infinite;
  box-shadow: 0 0 10px 4px #ffcc00;
}

@keyframes flash {
  0% { opacity: 1; }
  50% { opacity: 0.4; }
  100% { opacity: 1; }
}


/* Padding Helpers - Bootstrap 3-style utility classes */

/* All sides */
.p-0 { padding: 0 !important; }
.p-1 { padding: 0.25rem !important; }
.p-2 { padding: 0.5rem !important; }
.p-3 { padding: 1rem !important; }
.p-4 { padding: 1.5rem !important; }
.p-5 { padding: 2rem !important; }

/* Padding Top */
.pt-0 { padding-top: 0 !important; }
.pt-1 { padding-top: 0.25rem !important; }
.pt-2 { padding-top: 0.5rem !important; }
.pt-3 { padding-top: 1rem !important; }
.pt-4 { padding-top: 1.5rem !important; }
.pt-5 { padding-top: 2rem !important; }

/* Padding Bottom */
.pb-0 { padding-bottom: 0 !important; }
.pb-1 { padding-bottom: 0.25rem !important; }
.pb-2 { padding-bottom: 0.5rem !important; }
.pb-3 { padding-bottom: 1rem !important; }
.pb-4 { padding-bottom: 1.5rem !important; }
.pb-5 { padding-bottom: 2rem !important; }

/* Padding Left */
.pl-0 { padding-left: 0 !important; }
.pl-1 { padding-left: 0.25rem !important; }
.pl-2 { padding-left: 0.5rem !important; }
.pl-3 { padding-left: 1rem !important; }
.pl-4 { padding-left: 1.5rem !important; }
.pl-5 { padding-left: 2rem !important; }

/* Padding Right */
.pr-0 { padding-right: 0 !important; }
.pr-1 { padding-right: 0.25rem !important; }
.pr-2 { padding-right: 0.5rem !important; }
.pr-3 { padding-right: 1rem !important; }
.pr-4 { padding-right: 1.5rem !important; }
.pr-5 { padding-right: 2rem !important; }

/* Padding X (Left &amp; Right) */
.px-0 { padding-left: 0 !important; padding-right: 0 !important; }
.px-1 { padding-left: 0.25rem !important; padding-right: 0.25rem !important; }
.px-2 { padding-left: 0.5rem !important; padding-right: 0.5rem !important; }
.px-3 { padding-left: 1rem !important; padding-right: 1rem !important; }
.px-4 { padding-left: 1.5rem !important; padding-right: 1.5rem !important; }
.px-5 { padding-left: 2rem !important; padding-right: 2rem !important; }

/* Padding Y (Top &amp; Bottom) */
.py-0 { padding-top: 0 !important; padding-bottom: 0 !important; }
.py-1 { padding-top: 0.25rem !important; padding-bottom: 0.25rem !important; }
.py-2 { padding-top: 0.5rem !important; padding-bottom: 0.5rem !important; }
.py-3 { padding-top: 1rem !important; padding-bottom: 1rem !important; }
.py-4 { padding-top: 1.5rem !important; padding-bottom: 1.5rem !important; }
.py-5 { padding-top: 2rem !important; padding-bottom: 2rem !important; }
</css>
        <data_table>sp_instance</data_table>
        <demo_data>{
	"options": {
		"background_color_hex": "#fff",
			"logo_url": "../sn_games_logo.png",
				"font_family": "Arial, sans-serif",
					"default_game_mode": "pvc",
						"font_color_hex": "#000000",
							"provider_url": "https://github.com/ramon-dejesus/sn-games"
	}
}</demo_data>
        <description>Connect Four is a two-player competitive game widget designed for the ServiceNow Service Portal as part of the sn-games suite. This widget replicates the classic vertical strategy game where players take turns dropping colored discs into a 7-column, 6-row grid. The first player to align four discs horizontally, vertically, or diagonally wins.</description>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>sn_games_connectfour_widget</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Connect Four Game Widget</name>
        <option_schema>[{"hint":"#fff, Hex color background color for the game.","name":"background_color_hex","section":"Presentation","default_value":"#fff","label":"Background Color Hex","type":"string"},{"hint":"Optional logo image URL displayed in the widget.","name":"logo_url","section":"Presentation","default_value":"","label":"Logo URL","type":"string"},{"hint":"Custom font-family to apply inside the widget.","name":"font_family","section":"Presentation","default_value":"Arial, sans-serif","label":"Font Family","type":"string"},{"hint":"Player vs Player (PVP), Player vs CPU (PVC)","name":"default_game_mode","section":"Behavior","default_value":"pvc","label":"Default Game Mode (Player vs CPU)","type":"choice","choices":[{"label":"pvp","value":"pvp"},{"label":"pvc","value":"pvc"}]},{"hint":"#000, Hexadecimal color value for the font text of game.","name":"font_color_hex","section":"Presentation","default_value":"#000000","label":"Font Color Hex","type":"string"},{"hint":"This was brought to you by DE JESUS SERVICES, INC. (Modify repo url or your website here.)","name":"provider_url","section":"Documentation","default_value":"https://github.com/ramon-dejesus/sn-games","label":"Provider URL","type":"string"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
    /* populate the 'data' object */
    /* e.g., data.table = $sp.getValue('table'); */

    // Initialize default widget options if needed
    data.options = options;

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-04-09 00:49:39</sys_created_on>
        <sys_id>98a94de993b0a210b17c70a08bba1064</sys_id>
        <sys_mod_count>96</sys_mod_count>
        <sys_name>Connect Four Game Widget</sys_name>
        <sys_package display_value="SN GAMES" source="x_71150_sn_games">54dd6c2b93602210b17c70a08bba107a</sys_package>
        <sys_policy/>
        <sys_scope display_value="SN GAMES">54dd6c2b93602210b17c70a08bba107a</sys_scope>
        <sys_update_name>sp_widget_98a94de993b0a210b17c70a08bba1064</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-04-10 17:36:50</sys_updated_on>
        <template><![CDATA[<div class="sn-games-connectfour p-4" ng-style="{ 'font-family': c.fontFamily, 'color': c.fontColorHex, 'background-color': c.backgroundColorHex }">

  <div class="text-center mb-4">
    <h2 class="text-xl font-bold">Connect Four</h2>
  </div>

  <div class="game-board-options row pr-2 pl-2 pb-2 center-cols">
    <div class="col-xs-7 text-left" style="display: contents;">
      <div class="game-mode-inline">
        <label for="mode">Game Mode:</label>
        <select id="mode"
                class="form-control input-sm"
                ng-model="c.mode"
                ng-change="c.resetGame()">
          <option value="pvp">Player vs Player</option>
          <option value="pvc">Player vs CPU</option>
        </select>
      </div>
    </div>
    <div class="col-xs-3 text-center">
      <button class="btn" ng-class="{ 'btn-danger': c.winner || c.isDraw}" ng-click="c.resetGame()">Reset</button>
    </div>
    <div class="col-xs-2 text-center">
      <p class="text-lg font-bold">Winner:
        <span ng-if="c.winner" class="font-bold">{{c.winner}}</span>
        <span class="font-bold" ng-if="!c.winner && c.isDraw">Draw!</span>
        <span class="font-bold" ng-if="!c.winner && !c.isDraw">?</span>
      </p>
    </div>
  </div>

  <div class="text-center pb-2" aria-live="polite">
    <p class="cpu-spinner text-muted" ng-if="c.cpuThinking">
      ]]>🤖<![CDATA[ CPU is thinking...
    </p>
    <p class="text-lg font-bold" ng-if="!c.winner && !c.isDraw && !c.cpuThinking">
      Current Turn:
      <span ng-class="{ 'cf-red': c.currentPlayer === 'R', 'cf-black': c.currentPlayer === 'B' }" class="label">
        {{c.currentPlayer === 'R' ? 'Red' : 'Black'}}
      </span>
    </p>
    <p class="text-lg font-bold" ng-if="c.winner">
      ]]>🎉<![CDATA[ Winner:
      <span ng-class="{ 'cf-red': c.winner === 'R', 'cf-black': c.winner === 'B' }" class="label">
        {{c.winner === 'R' ? 'Red' : 'Black'}}
      </span>
    </p>
    <p class="text-lg font-bold" ng-if="c.isDraw">
      ]]>🤝<![CDATA[ It's a draw!
    </p>
  </div>

  <!-- CORRECTED GRID DISPLAY: Use true CSS grid for 7 columns -->
  <div class="game-board cf-grid center-block"
       ng-class="{ 'cpu-disabled': c.cpuThinking }"
       aria-label="Connect Four Board"
       role="grid">

    <!-- Render columns horizontally using CSS grid -->
    <div class="flex flex-col items-center" ng-repeat="colIndex in [0,1,2,3,4,5,6] track by colIndex">

      <!-- Column drop button -->
      <div class="cf-cell w-16 h-16 border border-gray-500 flex items-center justify-center text-md font-bold rounded-full text-white text-center"
           ng-click="!c.cpuThinking && c.dropDisc(colIndex)"
           tabindex="0"
           role="button"
           aria-label="Drop disc in column {{$index + 1}}"
           ng-keypress="!c.cpuThinking && ($event.keyCode === 13 || $event.keyCode === 32) && c.dropDisc(colIndex)">
        ↓
      </div>

      <!-- Stack each row from top to bottom (bottom row is index 5) -->
      <div class="cf-cell w-16 h-16 border border-gray-500 flex items-center justify-center rounded-full text-sm"
           ng-repeat="rowIndex in [0,1,2,3,4,5] track by rowIndex"
           ng-class="c.getCellClass(rowIndex, colIndex)"
           role="gridcell"
           aria-label="{{ c.board[rowIndex][colIndex] === 'R' ? 'Red Disc' : (c.board[rowIndex][colIndex] === 'B' ? 'Black Disc' : 'Empty Cell') }}">
        <span class="cf-disc" ng-if="c.board[rowIndex][colIndex]">
          {{ c.board[rowIndex][colIndex] === 'R' ? 'Red' : 'Black' }}
        </span>
      </div>

    </div>
  </div>

  <div class="text-center pt-5 pb-4">
    <a ng-href="{{c.providerUrl}}" target="_blank" ng-style="{'color': c.fontColorHex}" class="text-muted small">
      Brought to you by <strong>DE JESUS SERVICES, INC.</strong>
      <img ng-if="c.logoUrl" ng-src="{{c.logoUrl}}" alt="Game Logo" class="img-rounded img-responsive" style="display:inline-block; height: 1.5em; vertical-align: middle; margin-left: 5px;">
    </a>
  </div>
</div>
]]></template>
    </sp_widget>
</record_update>
