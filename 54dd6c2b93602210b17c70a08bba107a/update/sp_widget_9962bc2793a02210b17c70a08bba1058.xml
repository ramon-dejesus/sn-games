<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function($scope, $timeout) {
	/* widget controller */
	var c = this;

	// Widget Option Bindings
	c.mode = c.data.options.default_game_mode || "pvc";
	// c.backgroundColorClass = c.data.options.background_color_class || "bg-primary";
	c.backgroundColorHex = c.data.options.background_color_hex || "#fff";
	c.fontColorHex = c.data.options.font_color_hex || "#000000";
	c.borderColorHex = c.fontColorHex;
	c.fontFamily = c.data.options.font_family || "Arial, sans-serif";
	c.logoUrl = c.data.options.logo_url || "../sn_games_logo.png";
	c.providerUrl = c.data.options.provider_url || "https://github.com/ramon-dejesus/sn-games";

	// Game State
	let lastStarter = "O"; // Start with O, will alternate

	// Game Timeouts
	let cpuTimeoutId = null;

	/**
   * Alternates the first player between X and O.
   * @returns {string} - The next starting player ("X" or "O")
   */
	function getNextStarter() {
		lastStarter = lastStarter === "X" ? "O" : "X";
		return lastStarter;
	}

	c.board = Array(9).fill("");
	c.currentPlayer = getNextStarter();
	c.winner = null;
	c.isDraw = false;
	c.cpuThinking = false;

	/**
   * Handles a move from a player or CPU.
   * Validates the cell, checks for winner, and triggers CPU turn if needed.
   * @param {number} index - The board index selected.
   */
	c.makeMove = function(index) {
		try {
			if (typeof index !== 'number') {
				throw new Error('index not recieved');
			}

			if (c.board[index] || c.winner || (c.mode === "pvc" && c.cpuThinking)) return;

			c.board[index] = c.currentPlayer;
			if (checkWinner()) {
				c.winner = c.currentPlayer;
			} else if (c.board.every(cell => cell)) {
				c.isDraw = true;
			} else {
				c.currentPlayer = c.currentPlayer === "X" ? "O" : "X";

				if (c.mode === "pvc" && c.currentPlayer === "O") {
					c.cpuThinking = true;
					setTimeout(function() {
						c.makeCpuMove();
					}, 1000);
				}
			}

		}
		catch (error) {
			let errorMessage = "Error: Could not make move due to: " + JSON.stringify(error);
			console.error(errorMessage);
		}
	};

	/**
   * Executes the CPU's move based on win/block/random strategy.
   * Ends turn and switches back to player.
   */
	c.makeCpuMove = function() {
		try {
			if (c.winner || c.isDraw) {
				c.cpuThinking = false;
				return;
			}

			const emptyIndices = c.board
			.map((cell, idx) => cell === "" ? idx : null)
			.filter(i => i !== null);

			if (emptyIndices.length === 0) {
				c.cpuThinking = false;
				return;
			}

			const winningMove = findStrategicMove("O");
			const blockingMove = winningMove === null ? findStrategicMove("X") : null;
			const chosenIndex = winningMove !== null
			? winningMove
			: (blockingMove !== null
				 ? blockingMove
				 : emptyIndices[Math.floor(Math.random() * emptyIndices.length)]);

			c.board[chosenIndex] = c.currentPlayer;
			if (checkWinner()) {
				c.winner = c.currentPlayer;
			} else if (c.board.every(cell => cell)) {
				c.isDraw = true;
			} else {
				c.currentPlayer = "X";
			}

			c.cpuThinking = false;
			$scope.$applyAsync();

		}
		catch (error) {
			let errorMessage = "Error: Could not make CPU move due to: " + JSON.stringify(error);
			console.error(errorMessage);
		}
	};

	/**
   * Searches the board for a winning or blocking move based on the mark.
   * @param {string} mark - "X" or "O"
   * @returns {number|null} - Index of strategic move or null if not found
   */
	function findStrategicMove(mark) {
		try {
			if (typeof mark !== "string" || (mark !== "X" && mark !== "O")) {
				throw new Error("mark was not recieved");
			}
			const combos = [
				[0, 1, 2], [3, 4, 5], [6, 7, 8],
				[0, 3, 6], [1, 4, 7], [2, 5, 8],
				[0, 4, 8], [2, 4, 6]
			];
			for (let combo of combos) {
				const [a, b, cIdx] = combo;
				const marks = [c.board[a], c.board[b], c.board[cIdx]];
				const matchCount = marks.filter(m => m === mark).length;
				const emptySpots = combo.filter(i => c.board[i] === "");
				if (matchCount === 2 && emptySpots.length === 1) {
					return emptySpots[0];
				}
			}
			return null;

		}
		catch (error) {
			let errorMessage = "Error: Could not find strategic move due to: " + JSON.stringify(error);
			console.error(errorMessage);
		}
	}

	/**
   * Checks if the current board state contains a winning combination.
   * @returns {boolean} - True if there is a winner
   */
	function checkWinner() {
		try {
			const combos = [
				[0, 1, 2], [3, 4, 5], [6, 7, 8],
				[0, 3, 6], [1, 4, 7], [2, 5, 8],
				[0, 4, 8], [2, 4, 6]
			];
			return combos.some(([a, b, cIdx]) => {
				return c.board[a] && c.board[a] === c.board[b] && c.board[a] === c.board[cIdx];
			});
		}
		catch (error) {
			let errorMessage = "Error: Could not check winner due to: " + JSON.stringify(error);
			console.error(errorMessage);
		}
	}

	/**
   * Resets the game state and triggers CPU move if CPU starts.
   */
	c.resetGame = function() {
		try {
			c.board = Array(9).fill("");
			c.currentPlayer = getNextStarter();
			c.winner = null;
			c.isDraw = false;
			c.cpuThinking = false;

			if (c.mode === "pvc" && c.currentPlayer === "O") {
				c.cpuThinking = true;
				cpuTimeoutId = $timeout(() => {
					c.makeCpuMove();
				}, 1000);
			}

			if (cpuTimeoutId) $timeout.cancel(cpuTimeoutId);

		}
		catch (error) {
			let errorMessage = "Error: Could not reset game due to: " + JSON.stringify(error);
			console.error(errorMessage);
		}
	};

	/**
   * Auto-start: If CPU starts first, trigger its move.
   */
	if (c.mode === "pvc" && c.currentPlayer === "O") {
		c.cpuThinking = true;
		cpuTimeoutId = $timeout(() => {
			c.makeCpuMove();
		}, 50);
	}
};
]]></client_script>
        <controller_as>c</controller_as>
        <css>/* Tic Tac Toe Widget Styles */

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

[tabindex]:focus {
  outline: 3px solid #007bff;
}

.sn-games-tictactoe {
  font-family: var(--font-family, sans-serif);
}

.sn-games-tictactoe .game-board-options {
  width: 100%;
  max-width: 30em;
  margin: 0 auto;
}

.sn-games-tictactoe .form-control {
  width: 100%;
  max-width: 200px;
}

/* Game mode label + picker inline and styled cleanly */
.game-mode-inline {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
}

.game-mode-inline label {
  margin: 0;
  font-weight: bold;
  white-space: nowrap;
}

.game-mode-inline select {
  display: inline-block;
  width: auto;
  min-width: 150px;
}

.sn-games-tictactoe .btn {
  padding: 0.5rem 1rem;
  font-weight: 600;
}

.sn-games-tictactoe .game-board {
  width: 100%; 
  max-width: 30em;
}

.sn-games-tictactoe .grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
}

.sn-games-tictactoe .grid div {
  display: flex;
  align-items: center;
  justify-content: center;
  aspect-ratio: 1 / 1;
  font-size: 1.5rem;
  font-weight: bold;
  background-color: var(--cell-bg, #ffffff);  
  text-align: center;
  cursor: pointer;
  border: 2px solid;
  transition: background-color 0.2s ease-in-out;
}

.sn-games-tictactoe .grid div:hover {
  background-color: var(--cell-hover-bg, #f1f1f1);
}

/* Visual feedback during CPU turn */
.sn-games-tictactoe .cursor-not-allowed {
  cursor: not-allowed !important;
  opacity: 0.5;
}

.sn-games-tictactoe .cpu-disabled {
  pointer-events: none;
  opacity: 0.6;
}

.sn-games-tictactoe .text-center {
  text-align: center;
}

.sn-games-tictactoe .text-lg {
  font-size: 1.25rem;
}

.sn-games-tictactoe .font-bold {
  font-weight: bold;
}

/* Utility Helpers */
.center-cols {
  display: flex;
  align-items: center;
  justify-content: center;
}

.center-cols &gt; .col-xs-4 {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

/* Padding Helpers - Bootstrap 3-style utility classes */

/* All sides */
.p-0 { padding: 0 !important; }
.p-1 { padding: 0.25rem !important; }
.p-2 { padding: 0.5rem !important; }
.p-3 { padding: 1rem !important; }
.p-4 { padding: 1.5rem !important; }
.p-5 { padding: 2rem !important; }

/* Padding Top */
.pt-0 { padding-top: 0 !important; }
.pt-1 { padding-top: 0.25rem !important; }
.pt-2 { padding-top: 0.5rem !important; }
.pt-3 { padding-top: 1rem !important; }
.pt-4 { padding-top: 1.5rem !important; }
.pt-5 { padding-top: 2rem !important; }

/* Padding Bottom */
.pb-0 { padding-bottom: 0 !important; }
.pb-1 { padding-bottom: 0.25rem !important; }
.pb-2 { padding-bottom: 0.5rem !important; }
.pb-3 { padding-bottom: 1rem !important; }
.pb-4 { padding-bottom: 1.5rem !important; }
.pb-5 { padding-bottom: 2rem !important; }

/* Padding Left */
.pl-0 { padding-left: 0 !important; }
.pl-1 { padding-left: 0.25rem !important; }
.pl-2 { padding-left: 0.5rem !important; }
.pl-3 { padding-left: 1rem !important; }
.pl-4 { padding-left: 1.5rem !important; }
.pl-5 { padding-left: 2rem !important; }

/* Padding Right */
.pr-0 { padding-right: 0 !important; }
.pr-1 { padding-right: 0.25rem !important; }
.pr-2 { padding-right: 0.5rem !important; }
.pr-3 { padding-right: 1rem !important; }
.pr-4 { padding-right: 1.5rem !important; }
.pr-5 { padding-right: 2rem !important; }

/* Padding X (Left &amp; Right) */
.px-0 { padding-left: 0 !important; padding-right: 0 !important; }
.px-1 { padding-left: 0.25rem !important; padding-right: 0.25rem !important; }
.px-2 { padding-left: 0.5rem !important; padding-right: 0.5rem !important; }
.px-3 { padding-left: 1rem !important; padding-right: 1rem !important; }
.px-4 { padding-left: 1.5rem !important; padding-right: 1.5rem !important; }
.px-5 { padding-left: 2rem !important; padding-right: 2rem !important; }

/* Padding Y (Top &amp; Bottom) */
.py-0 { padding-top: 0 !important; padding-bottom: 0 !important; }
.py-1 { padding-top: 0.25rem !important; padding-bottom: 0.25rem !important; }
.py-2 { padding-top: 0.5rem !important; padding-bottom: 0.5rem !important; }
.py-3 { padding-top: 1rem !important; padding-bottom: 1rem !important; }
.py-4 { padding-top: 1.5rem !important; padding-bottom: 1.5rem !important; }
.py-5 { padding-top: 2rem !important; padding-bottom: 2rem !important; }
</css>
        <data_table>sp_instance</data_table>
        <demo_data>{
  "options": {
    		"background_color_hex": "#fff",
    		"logo_url": "../sn_games_logo.png",
    		"font_family": "Arial, sans-serif",
    		"default_game_mode": "pvc",
				"font_color_hex": "#000000",
				"provider_url": "https://github.com/ramon-dejesus/sn-games"
  }
}</demo_data>
        <description>Fully scoped Tic Tac Toe game widget for the ServiceNow Service Portal. Supports PvP and PvC modes, custom branding via widget options, reset functionality, and clean deployment as a scoped application.</description>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>sn_games_tictactoe_widget</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Tic Tac Toe Game Widget</name>
        <option_schema>[{"hint":"#fff, Hex color background color for the game.","name":"background_color_hex","section":"Presentation","default_value":"#fff","label":"Background Color Hex","type":"string"},{"hint":"Optional logo image URL displayed in the widget.","name":"logo_url","section":"Presentation","default_value":"","label":"Logo URL","type":"string"},{"hint":"Custom font-family to apply inside the widget.","name":"font_family","section":"Presentation","default_value":"Arial, sans-serif","label":"Font Family","type":"string"},{"hint":"Player vs Player (PVP), Player vs CPU (PVC)","name":"default_game_mode","section":"Behavior","default_value":"pvc","label":"Default Game Mode (Player vs CPU)","type":"choice","choices":[{"label":"pvp","value":"pvp"},{"label":"pvc","value":"pvc"}]},{"hint":"#000, Hexadecimal color value for the font text of game.","name":"font_color_hex","section":"Presentation","default_value":"#000000","label":"Font Color Hex","type":"string"},{"hint":"This was brought to you by DE JESUS SERVICES, INC. (Modify repo url or your website here.)","name":"provider_url","section":"Documentation","default_value":"https://github.com/ramon-dejesus/sn-games","label":"Provider URL","type":"string"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
    /* populate the 'data' object */
    /* e.g., data.table = $sp.getValue('table'); */

    // Initialize default widget options if needed
    data.options = options;

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-04-02 18:01:25</sys_created_on>
        <sys_id>9962bc2793a02210b17c70a08bba1058</sys_id>
        <sys_mod_count>167</sys_mod_count>
        <sys_name>Tic Tac Toe Game Widget</sys_name>
        <sys_package display_value="SN GAMES" source="x_71150_sn_games">54dd6c2b93602210b17c70a08bba107a</sys_package>
        <sys_policy/>
        <sys_scope display_value="SN GAMES">54dd6c2b93602210b17c70a08bba107a</sys_scope>
        <sys_update_name>sp_widget_9962bc2793a02210b17c70a08bba1058</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-04-10 18:51:43</sys_updated_on>
        <template><![CDATA[<!-- Widget Body Template -->
<div class="sn-games-tictactoe p-4"
     ng-class="c.backgroundColorClass"
     ng-style="{ 'font-family': c.fontFamily, 'color': c.fontColorHex, 'background-color': c.backgroundColorHex }">

  <div class="text-center mb-4">
    <h2 class="text-xl font-bold">Tic Tac Toe</h2>
  </div>

  <div class="game-board-options row pr-2 pl-2 pb-2 center-cols">
    <div class="col-xs-7 text-left" style="display: contents;">
      <div class="game-mode-inline">
        <label for="mode">Game Mode:</label>
        <select id="mode"
                class="form-control input-sm"
                ng-model="c.mode"
                ng-change="c.resetGame()">
          <option value="pvp">Player vs Player</option>
          <option value="pvc">Player vs CPU</option>
        </select>
      </div>
    </div>
    <div class="col-xs-3 text-center">
      <button class="btn"
              ng-class="{ 'btn-danger': c.winner || c.isDraw }"
              ng-click="c.resetGame()">Reset</button>
    </div>
    <div class="col-xs-2 text-center">
      <p class="text-lg font-bold" aria-live="assertive">
        Winner:
        <span ng-if="c.winner" class="font-bold">{{c.winner}}</span>
        <span class="font-bold" ng-if="!c.winner && c.isDraw">Draw!</span>
        <span class="font-bold" ng-if="!c.winner && !c.isDraw">?</span>
      </p>
    </div>
  </div>

  <div class="text-center pb-2" ng-if="!c.winner && !c.isDraw">
    <p class="text-lg font-bold" aria-live="polite">
      Current Turn:
      <span class="label label-danger">{{c.currentPlayer}}</span>
    </p>
  </div>

  <div class="game-board grid grid-cols-3 gap-2 center-block"
       ng-class="{ 'cpu-disabled': c.cpuThinking }">
    <div ng-style="{ 'border-color': c.borderColor }"
         ng-repeat="cell in c.board track by $index"
         role="button"
         tabindex="0"
         aria-label="Cell {{$index + 1}}, currently {{cell || 'empty'}}"
         aria-disabled="{{c.cpuThinking}}"
         ng-keypress="!c.cpuThinking && ($event.keyCode === 13 || $event.keyCode === 32) && c.makeMove($index)"
         class="w-16 h-16 border border-gray-500 flex items-center justify-center text-2xl"
         ng-click="!c.cpuThinking && c.makeMove($index)"
         ng-class="{ 'cursor-pointer': !c.cpuThinking, 'cursor-not-allowed disabled-cell': c.cpuThinking }">
      {{cell}}
    </div>
  </div>

  <div class="text-center pt-5 pb-4">
    <a ng-href="{{c.providerUrl}}" target="_blank"
       ng-style="{ 'color': c.fontColorHex }"
       class="text-muted small">
      Brought to you by <strong>DE JESUS SERVICES, INC.</strong>
      <img ng-if="c.logoUrl"
           ng-src="{{c.logoUrl}}"
           alt="Game Logo"
           class="img-rounded img-responsive"
           style="display:inline-block; height: 1.5em; vertical-align: middle; margin-left: 5px;">
    </a>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
